// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "lib/openzeppelin-contracts/contracts/access/Ownable.sol";
// import "lib/openzeppelin-contracts/contracts/utils/Create2.sol";
import "./libraries/UniERC20.sol";
import "./Mooniswap.sol";


contract MooniFactory is Ownable {
    using UniERC20 for IERC20;

    event Deployed(
        address indexed mooniswap,
        address indexed token1,
        address indexed token2
    );

    uint256 public constant MAX_FEE = 0.003e18; // 0.3%

    uint256 public fee;
    Mooniswap[] public allPools;
    mapping(Mooniswap => bool) public isPool;
    mapping(IERC20 => mapping(IERC20 => Mooniswap)) public pools;

    function getAllPools() external view returns(Mooniswap[] memory) {
        return allPools;
    }

    function setFee(uint256 newFee) external onlyOwner {
        require(newFee <= MAX_FEE, "Factory: fee should be <= 0.3%");
        fee = newFee;
    }

    function deploy(IERC20 tokenA, IERC20 tokenB) public returns(Mooniswap pool) {
        require(tokenA != tokenB, "Factory: not support same tokens");
        require(pools[tokenA][tokenB] == Mooniswap(address(0)), "Factory: pool already exists");

        (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);
        IERC20[] memory tokens = new IERC20[](2);
        tokens[0] = token1;
        tokens[1] = token2;

        string memory symbol1 = token1.uniSymbol();
        string memory symbol2 = token2.uniSymbol();

        // bytes32 _salt = keccak256(abi.encodePacked(token1, token2));
        // 
        // bytes memory _bytecode = type(Mooniswap).creationCode;
        // address predictedAddress = address(uint160(uint(keccak256(abi.encodePacked(
        //     bytes1(0xff),
        //     address(this),
        //     salt,
        //     keccak256(abi.encodePacked(
        //         type(D).creationCode,
        //         abi.encode(arg)
        //     ))
        // )))));

        // D d = new D{salt: salt}(arg);
        
        // address _pool = Create2.deploy(
        // 0,
        // _salt,
        // _bytecode
        // type(Mooniswap).creationCode
        // ); 

        pool = new Mooniswap(
            tokens,
            string(abi.encodePacked("Mooniswap V1 (", symbol1, "-", symbol2, ")")),
            string(abi.encodePacked("MOON-V1-", symbol1, "-", symbol2))
        );
        
    // function initialize(IERC20[] memory assets) external {
    //  
    //     require(assets.length == 2, "Mooniswap: only 2 tokens allowed");
    //  //   require(msg.sender == factory, "FORBIDDEN");
    //     factory = IFactory(msg.sender);
    //     tokens = assets;
    //     for (uint i = 0; i < assets.length; i++) {
    //         require(!isToken[assets[i]], "Mooniswap: duplicate tokens");
    //         isToken[assets[i]] = true;
    //     }
    // }

        // Mooniswap pool = Mooniswap(_pool);
        pool.transferOwnership(owner());
        pools[token1][token2] = pool;
        pools[token2][token1] = pool;
        allPools.push(pool);
        isPool[pool] = true;

        emit Deployed(
            address(pool),
            address(token1),
            address(token2)
        );
    }

    function sortTokens(IERC20 tokenA, IERC20 tokenB) public pure returns(IERC20, IERC20) {
        if (tokenA < tokenB) {
            return (tokenA, tokenB);
        }
        return (tokenB, tokenA);
    }
}
